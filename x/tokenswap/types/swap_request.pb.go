// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tokenswap/swap_request.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SwapRequest struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id             uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	BurnTxHash     string `protobuf:"bytes,3,opt,name=burnTxHash,proto3" json:"burnTxHash,omitempty"`
	EthereumSender string `protobuf:"bytes,4,opt,name=ethereumSender,proto3" json:"ethereumSender,omitempty"`
	Receiver       string `protobuf:"bytes,5,opt,name=receiver,proto3" json:"receiver,omitempty"`
	AmountEng      string `protobuf:"bytes,6,opt,name=amountEng,proto3" json:"amountEng,omitempty"`
	SignerAddr     string `protobuf:"bytes,7,opt,name=signerAddr,proto3" json:"signerAddr,omitempty"`
}

func (m *SwapRequest) Reset()         { *m = SwapRequest{} }
func (m *SwapRequest) String() string { return proto.CompactTextString(m) }
func (*SwapRequest) ProtoMessage()    {}
func (*SwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_324bafc69758ebca, []int{0}
}
func (m *SwapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapRequest.Merge(m, src)
}
func (m *SwapRequest) XXX_Size() int {
	return m.Size()
}
func (m *SwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwapRequest proto.InternalMessageInfo

func (m *SwapRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SwapRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SwapRequest) GetBurnTxHash() string {
	if m != nil {
		return m.BurnTxHash
	}
	return ""
}

func (m *SwapRequest) GetEthereumSender() string {
	if m != nil {
		return m.EthereumSender
	}
	return ""
}

func (m *SwapRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *SwapRequest) GetAmountEng() string {
	if m != nil {
		return m.AmountEng
	}
	return ""
}

func (m *SwapRequest) GetSignerAddr() string {
	if m != nil {
		return m.SignerAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*SwapRequest)(nil), "hdachmh.swapmodule.tokenswap.SwapRequest")
}

func init() { proto.RegisterFile("tokenswap/swap_request.proto", fileDescriptor_324bafc69758ebca) }

var fileDescriptor_324bafc69758ebca = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0x33, 0x31,
	0x10, 0xc7, 0x9b, 0x7e, 0xfd, 0x5a, 0x1b, 0xa1, 0x87, 0xe0, 0x21, 0x94, 0x12, 0x8a, 0x07, 0xe9,
	0xa5, 0xbb, 0x88, 0x4f, 0xa0, 0x20, 0x08, 0xde, 0xb6, 0x9e, 0xbc, 0x48, 0x76, 0x33, 0x6c, 0x16,
	0x4d, 0xb2, 0x66, 0x13, 0x5b, 0xdf, 0xc2, 0xc7, 0xf2, 0xd8, 0xa3, 0xde, 0x64, 0xf7, 0x45, 0x64,
	0xb3, 0xd8, 0x15, 0x2f, 0x21, 0xf3, 0x9f, 0xdf, 0x0c, 0xc3, 0x0f, 0x2f, 0x9c, 0x79, 0x04, 0x5d,
	0x6d, 0x79, 0x19, 0xb7, 0xcf, 0x83, 0x85, 0x67, 0x0f, 0x95, 0x8b, 0x4a, 0x6b, 0x9c, 0x21, 0x0b,
	0x29, 0x78, 0x26, 0x95, 0x8c, 0xda, 0x9e, 0x32, 0xc2, 0x3f, 0x41, 0x74, 0x18, 0x98, 0x9f, 0xe4,
	0x26, 0x37, 0x01, 0x8c, 0xdb, 0x5f, 0x37, 0x73, 0xfa, 0x89, 0xf0, 0xf1, 0x66, 0xcb, 0xcb, 0xa4,
	0xdb, 0x44, 0x28, 0x9e, 0x64, 0x16, 0xb8, 0x33, 0x96, 0xa2, 0x25, 0x5a, 0x4d, 0x93, 0x9f, 0x92,
	0xcc, 0xf0, 0xb0, 0x10, 0x74, 0xb8, 0x44, 0xab, 0x51, 0x32, 0x2c, 0x04, 0x61, 0x18, 0xa7, 0xde,
	0xea, 0xbb, 0xdd, 0x0d, 0xaf, 0x24, 0xfd, 0x17, 0xe0, 0x5f, 0x09, 0x39, 0xc3, 0x33, 0x70, 0x12,
	0x2c, 0x78, 0xb5, 0x01, 0x2d, 0xc0, 0xd2, 0x51, 0x60, 0xfe, 0xa4, 0x64, 0x8e, 0x8f, 0x2c, 0x64,
	0x50, 0xbc, 0x80, 0xa5, 0xff, 0x03, 0x71, 0xa8, 0xc9, 0x02, 0x4f, 0xb9, 0x32, 0x5e, 0xbb, 0x6b,
	0x9d, 0xd3, 0x71, 0x68, 0xf6, 0x41, 0x7b, 0x41, 0x55, 0xe4, 0x1a, 0xec, 0xa5, 0x10, 0x96, 0x4e,
	0xba, 0x0b, 0xfa, 0xe4, 0xea, 0xf6, 0xbd, 0x66, 0x68, 0x5f, 0x33, 0xf4, 0x55, 0x33, 0xf4, 0xd6,
	0xb0, 0xc1, 0xbe, 0x61, 0x83, 0x8f, 0x86, 0x0d, 0xee, 0xcf, 0xf3, 0xc2, 0x49, 0x9f, 0x46, 0x99,
	0x51, 0x71, 0x2b, 0x6d, 0x2d, 0x95, 0x0c, 0x46, 0xd7, 0x9d, 0xb6, 0x78, 0x17, 0xf7, 0xa6, 0xdd,
	0x6b, 0x09, 0x55, 0x3a, 0x0e, 0xbe, 0x2e, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xad, 0x91,
	0xb6, 0x83, 0x01, 0x00, 0x00,
}

func (m *SwapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignerAddr) > 0 {
		i -= len(m.SignerAddr)
		copy(dAtA[i:], m.SignerAddr)
		i = encodeVarintSwapRequest(dAtA, i, uint64(len(m.SignerAddr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AmountEng) > 0 {
		i -= len(m.AmountEng)
		copy(dAtA[i:], m.AmountEng)
		i = encodeVarintSwapRequest(dAtA, i, uint64(len(m.AmountEng)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintSwapRequest(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EthereumSender) > 0 {
		i -= len(m.EthereumSender)
		copy(dAtA[i:], m.EthereumSender)
		i = encodeVarintSwapRequest(dAtA, i, uint64(len(m.EthereumSender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BurnTxHash) > 0 {
		i -= len(m.BurnTxHash)
		copy(dAtA[i:], m.BurnTxHash)
		i = encodeVarintSwapRequest(dAtA, i, uint64(len(m.BurnTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintSwapRequest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSwapRequest(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSwapRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovSwapRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SwapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSwapRequest(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSwapRequest(uint64(m.Id))
	}
	l = len(m.BurnTxHash)
	if l > 0 {
		n += 1 + l + sovSwapRequest(uint64(l))
	}
	l = len(m.EthereumSender)
	if l > 0 {
		n += 1 + l + sovSwapRequest(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovSwapRequest(uint64(l))
	}
	l = len(m.AmountEng)
	if l > 0 {
		n += 1 + l + sovSwapRequest(uint64(l))
	}
	l = len(m.SignerAddr)
	if l > 0 {
		n += 1 + l + sovSwapRequest(uint64(l))
	}
	return n
}

func sovSwapRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSwapRequest(x uint64) (n int) {
	return sovSwapRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SwapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwapRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwapRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwapRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwapRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwapRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwapRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwapRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwapRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwapRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwapRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwapRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwapRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwapRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwapRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountEng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwapRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwapRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwapRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountEng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwapRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwapRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwapRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwapRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwapRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSwapRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSwapRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwapRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwapRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSwapRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSwapRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSwapRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSwapRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSwapRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSwapRequest = fmt.Errorf("proto: unexpected end of group")
)
